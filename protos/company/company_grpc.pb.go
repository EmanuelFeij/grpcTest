// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package company

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompanyClient is the client API for Company service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyClient interface {
	GetAllUsers(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (Company_GetAllUsersClient, error)
	GetUserByName(ctx context.Context, in *UserName, opts ...grpc.CallOption) (Company_GetUserByNameClient, error)
	GetUserByID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (Company_GetUserByIDClient, error)
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Error, error)
	AddUserSeveralUsers(ctx context.Context, opts ...grpc.CallOption) (Company_AddUserSeveralUsersClient, error)
	DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Error, error)
}

type companyClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyClient(cc grpc.ClientConnInterface) CompanyClient {
	return &companyClient{cc}
}

func (c *companyClient) GetAllUsers(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (Company_GetAllUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Company_ServiceDesc.Streams[0], "/company/GetAllUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &companyGetAllUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Company_GetAllUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type companyGetAllUsersClient struct {
	grpc.ClientStream
}

func (x *companyGetAllUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyClient) GetUserByName(ctx context.Context, in *UserName, opts ...grpc.CallOption) (Company_GetUserByNameClient, error) {
	stream, err := c.cc.NewStream(ctx, &Company_ServiceDesc.Streams[1], "/company/GetUserByName", opts...)
	if err != nil {
		return nil, err
	}
	x := &companyGetUserByNameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Company_GetUserByNameClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type companyGetUserByNameClient struct {
	grpc.ClientStream
}

func (x *companyGetUserByNameClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyClient) GetUserByID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (Company_GetUserByIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &Company_ServiceDesc.Streams[2], "/company/GetUserByID", opts...)
	if err != nil {
		return nil, err
	}
	x := &companyGetUserByIDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Company_GetUserByIDClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type companyGetUserByIDClient struct {
	grpc.ClientStream
}

func (x *companyGetUserByIDClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/company/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyClient) AddUserSeveralUsers(ctx context.Context, opts ...grpc.CallOption) (Company_AddUserSeveralUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Company_ServiceDesc.Streams[3], "/company/AddUserSeveralUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &companyAddUserSeveralUsersClient{stream}
	return x, nil
}

type Company_AddUserSeveralUsersClient interface {
	Send(*User) error
	CloseAndRecv() (*Error, error)
	grpc.ClientStream
}

type companyAddUserSeveralUsersClient struct {
	grpc.ClientStream
}

func (x *companyAddUserSeveralUsersClient) Send(m *User) error {
	return x.ClientStream.SendMsg(m)
}

func (x *companyAddUserSeveralUsersClient) CloseAndRecv() (*Error, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Error)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *companyClient) DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/company/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyServer is the server API for Company service.
// All implementations must embed UnimplementedCompanyServer
// for forward compatibility
type CompanyServer interface {
	GetAllUsers(*EmptyMessage, Company_GetAllUsersServer) error
	GetUserByName(*UserName, Company_GetUserByNameServer) error
	GetUserByID(*UserID, Company_GetUserByIDServer) error
	AddUser(context.Context, *User) (*Error, error)
	AddUserSeveralUsers(Company_AddUserSeveralUsersServer) error
	DeleteUser(context.Context, *User) (*Error, error)
	mustEmbedUnimplementedCompanyServer()
}

// UnimplementedCompanyServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyServer struct {
}

func (UnimplementedCompanyServer) GetAllUsers(*EmptyMessage, Company_GetAllUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (UnimplementedCompanyServer) GetUserByName(*UserName, Company_GetUserByNameServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserByName not implemented")
}
func (UnimplementedCompanyServer) GetUserByID(*UserID, Company_GetUserByIDServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedCompanyServer) AddUser(context.Context, *User) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedCompanyServer) AddUserSeveralUsers(Company_AddUserSeveralUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method AddUserSeveralUsers not implemented")
}
func (UnimplementedCompanyServer) DeleteUser(context.Context, *User) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedCompanyServer) mustEmbedUnimplementedCompanyServer() {}

// UnsafeCompanyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyServer will
// result in compilation errors.
type UnsafeCompanyServer interface {
	mustEmbedUnimplementedCompanyServer()
}

func RegisterCompanyServer(s grpc.ServiceRegistrar, srv CompanyServer) {
	s.RegisterService(&Company_ServiceDesc, srv)
}

func _Company_GetAllUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServer).GetAllUsers(m, &companyGetAllUsersServer{stream})
}

type Company_GetAllUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type companyGetAllUsersServer struct {
	grpc.ServerStream
}

func (x *companyGetAllUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _Company_GetUserByName_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserName)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServer).GetUserByName(m, &companyGetUserByNameServer{stream})
}

type Company_GetUserByNameServer interface {
	Send(*User) error
	grpc.ServerStream
}

type companyGetUserByNameServer struct {
	grpc.ServerStream
}

func (x *companyGetUserByNameServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _Company_GetUserByID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompanyServer).GetUserByID(m, &companyGetUserByIDServer{stream})
}

type Company_GetUserByIDServer interface {
	Send(*User) error
	grpc.ServerStream
}

type companyGetUserByIDServer struct {
	grpc.ServerStream
}

func (x *companyGetUserByIDServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _Company_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Company_AddUserSeveralUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CompanyServer).AddUserSeveralUsers(&companyAddUserSeveralUsersServer{stream})
}

type Company_AddUserSeveralUsersServer interface {
	SendAndClose(*Error) error
	Recv() (*User, error)
	grpc.ServerStream
}

type companyAddUserSeveralUsersServer struct {
	grpc.ServerStream
}

func (x *companyAddUserSeveralUsersServer) SendAndClose(m *Error) error {
	return x.ServerStream.SendMsg(m)
}

func (x *companyAddUserSeveralUsersServer) Recv() (*User, error) {
	m := new(User)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Company_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServer).DeleteUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// Company_ServiceDesc is the grpc.ServiceDesc for Company service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Company_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company",
	HandlerType: (*CompanyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _Company_AddUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Company_DeleteUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllUsers",
			Handler:       _Company_GetAllUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUserByName",
			Handler:       _Company_GetUserByName_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUserByID",
			Handler:       _Company_GetUserByID_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddUserSeveralUsers",
			Handler:       _Company_AddUserSeveralUsers_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protos/company/company.proto",
}
